#!/bin/bash

set -e

export WORKDIR=$(cd $(dirname $0) && pwd)

auth_token=""

init() {
    info "Checking dependencies..."
    # jq
    # curl
}

log() {
  script_name=${0##*/}
  timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  echo "== $script_name $timestamp $1"
}

info() {
    log "[INFO] $1"
}

error() {
    log "[ERROR] $1"
}

docker_hub_login(){
    password=$(cat .docker-token | grep -v "#" | grep -v -e '^[[:space:]]*$')
    info "Autheticating to Docker Hub. Please use the password provided..."
    docker login -u waltid -p $password
    echo
}

pull_docker_image() {
    info "Pulling Enterprise Stack v0.1.0"
    docker pull waltid/waltid-enterprise-api:0.1.0
    echo
}

start_container() {
    info "Starting up Enterprise Stack v0.1.0"
    docker compose up
}

run() { 
    docker_hub_login
    pull_docker_image
    start_container
}

get_superadmin_auth_token() {
    if [ -f .auth_token ]; then
        info "Super admin already logged in." 
    else
        info "Logging super admin in..."
        superadmin_login
    fi
    
    AUTH_TOKEN=$(cat .auth_token)
    # echo $AUTH_TOKEN

    eval $1=$AUTH_TOKEN
}

get_user_auth_token() {
    if [ -f .user_auth_token ]; then
        info "User already logged in." 
    else
        info "Logging user in..."
        user_admin_login
    fi
    
    USER_AUTH_TOKEN=$(cat .user_auth_token)
    info "Auth token: $USER_AUTH_TOKEN"

    eval $1=$USER_AUTH_TOKEN
}

superadmin_create_account() {
    superadmin_token=$(cat config/superadmin-registration.conf | sed -n '2 p' | cut -d \" -f 2)

    info "Registering token \"${superadmin_token}\" provided in the superadmin-registration.conf file"
    response=$(curl -X 'POST' \
        'http://localhost:3000/v1/superadmin/create-by-token' \
        -H 'accept: */*' \
        -H 'Content-Type: application/json' \
        -d "${superadmin_token}" 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "Super admin account could not be created."
        error "$response"
    else 
        info "Super admin account successfully created."
    fi
}

superadmin_login() {

    superadmin_email=$(cat config/superadmin-registration.conf | grep identifier | cut -d \" -f 2)
    superadmin_password=$(cat config/superadmin-registration.conf | grep password | cut -d \" -f 2)

    info "Logging in super admin with credentials provided in the superadmin-registration.conf file"
    response=$(curl -X 'POST' \
        'http://localhost:3000/auth/account/emailpass' \
        -H 'accept: application/json' \
        -H 'Content-Type: application/json' \
        -d "{
            \"email\": \"${superadmin_email}\",
            \"password\": \"${superadmin_password}\"
        }" 2> /dev/null)
    if [[ $response == *"exception"* ]]; then
        error "Super admin could not be logged in."
        error "$response"
    else
        info "Super admin logged in successfully."
        info "$response"

        AUTH_TOKEN=$(echo $response | jq .token | tr -d '"')
        echo $AUTH_TOKEN > .auth_token
    fi
}

init_db() {

    get_superadmin_auth_token AUTH_TOKEN

    info "Initializing the database based on the config/database.conf file"
    response=$(curl -X 'POST' \
        'http://localhost:3000/v1/admin/initial-setup' \
        -H 'accept: */*' \
        -H "Authorization: Bearer $AUTH_TOKEN" \
        -d '' 2> /dev/null)

    if [[ $response == *"Unauthorized"* ]]; then
        error "Database could not be initialized. Access denied."
        error "$response"
    else
        info "Database successfully initialized."
    fi
}

recreate_collections() {

    get_superadmin_auth_token AUTH_TOKEN

    response=$(curl -X 'POST' \
        'http://localhost:3000/v1/dev/database-recreate' \
        -H 'accept: */*' \
        -d '' 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "Database could not be recreated."
        error "$response"
    else
        info "Database successfully recreated."
    fi
}

create_organization() {

    get_superadmin_auth_token AUTH_TOKEN

    response=$(curl -X 'POST' \
        'http://localhost:3000/v1/organization/create' \
        -H 'accept: */*' \
        -H "Authorization: Bearer $AUTH_TOKEN" \
        -H 'Content-Type: application/json' \
        -d '{
            "_id": "waltid",
            "profile": {
                "name": "walt.id GmbH"
            },
            "billing": {
                "billingCountry": "AT",
                "billingAddress": "Liechtensteinstraße 111/115, 1090 Vienna",
                "vatNr": "ATU75569617"
            }
        }' 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "Organization could not be created."
        error "$response"
    else
        info "Organization successfully created."
    fi

}

create_user_account() {

    get_superadmin_auth_token AUTH_TOKEN

    rm -f .user_id

    response=$(curl -X 'POST' \
        'http://localhost:3000/v1/admin/account/register' \
        -H 'accept: application/json' \
        -H "Authorization: Bearer $AUTH_TOKEN" \
        -H 'Content-Type: application/json' \
        -d '{
        "profile": {
            "name": "Max Mustermann",
            "email": "max.mustermann@example.org",
            "addressCountry": "AT",
            "address": "Liechtensteinstraße 111/115, 1090 Vienna"
        },
        "preferences": {
            "timeZone": "UTC",
            "languagePreference": "EN"
        },
        "initialAuth": {
            "type": "email",
            "identifier": {
            "type": "email",
            "email": "max.mustermann@example.org"
            },
            "data": {
            "type": "email",
            "password": "password123456"
            }
        }
        }' 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "User account could not be created."
        error "$response"

        # TODO Offer to select an existing user to be used
    else

        # TODO Handle user already exists

        info "User account successfully created."

        regex="\"_id\":\"([0-9a-z-]+)\","
        if [[ "$response" =~ $regex ]]; then
            user_id=${BASH_REMATCH[1]}
            info "User ID: $user_id"

            echo $user_id > .user_id
            info "User ID saved at .user_id"
        else
            error "User ID not found in the HTTP response."
        fi
    fi

}

get_user_id() {

    if [ -f .user_id ]; then
        USER_ID=$(cat .user_id)
        info "User ID found: $USER_ID"
    else
        error "No user id found. Please run '$0 create-user-account' first. "
        exit -1
    fi

    eval $1=$USER_ID
}

add_admin_role_to_user() {

    # TODO Parameterise USER and ORG 

    get_superadmin_auth_token AUTH_TOKEN
    get_user_id USER_ID

    ROLE="waltid.admin"
    ORGANIZATION="waltid"

    info "Adding role '$ROLE' to user '$USER_ID' from organization '$ORGANIZATION'..."
    response=$(curl -X 'POST' \
        "http://localhost:3000/v1/admin/account/$USER_ID/roles/add/$ORGANIZATION/$ROLE" \
        -H 'accept: application/json' \
        -H "Authorization: Bearer $AUTH_TOKEN" \
        -d '' 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "Role could not be added."
        error "$response"
    else
        # TODO If response = {}, role hasn't been added either
        
        info "Role successfully added."
        info $response
    fi
}

user_admin_login() {
    
    # get_superadmin_auth_token AUTH_TOKEN

    USER="max.mustermann@example.org"
    PASS="password123456"

    response=$(curl -X 'POST' \
        'http://waltid.enterprise.localhost:3000/auth/account/emailpass' \
        -H 'accept: application/json' \
        -H 'Content-Type: application/json' \
        -d "{
            \"email\": \"$USER\",
            \"password\": \"$PASS\"
        }" 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "User $USER could not be logged in."
        error "$response"
    else
        
        regex="\"token\":\"([A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+)\""
        if [[ "$response" =~ $regex ]]; then
            AUTH_TOKEN=${BASH_REMATCH[1]}
            # info "User ID: $user_id"

            rm -f .user_auth_token 
            echo $AUTH_TOKEN > .user_auth_token
            info "User $USER successfully logged in with token $AUTH_TOKEN"
        else
            error "Auth token not found in the HTTP response."
        fi
    fi
}
         
create_tenant() {
    
    get_user_auth_token AUTH_TOKEN

    TENANT_ID="waltid.tenant1"

    response=$(curl -X 'POST' \
        "http://waltid.enterprise.localhost:3000/v1/$TENANT_ID/resource-api/tenants/create" \
        -H 'accept: */*' \
        -H "Authorization: Bearer $AUTH_TOKEN" \
        -H 'Content-Type: application/json' \
        -d '{
            "name":"My first Tenant with Tamino"
        }' 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "Tenant $TENANT_ID could not be created."
        error "$response"
    else
        info "Tenant $TENANT_ID successfully created."
    fi
}

create_service() {
    
    get_user_auth_token AUTH_TOKEN

    SERVICE_TYPE=$1
    SERVICE_NAME=$2

    SERVICE_ID="waltid.tenant1.$SERVICE_NAME"

    response=$(curl -X 'POST' \
        "http://waltid.enterprise.localhost:3000/v1/$SERVICE_ID/resource-api/services/create" \
        -H 'accept: */*' \
        -H "Authorization: Bearer $AUTH_TOKEN" \
        -H 'Content-Type: application/json' \
        -d "{
            \"type\": \"$SERVICE_TYPE\"
        }" 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "$SERVICE_ID could not be created."
        error "$response"
    else
        info "$SERVICE_ID successfully created."
        echo "$response" | jq
    fi
}

create_kms_service() {
    create_service "kms" "kms1"
}

generate_key() {
    
    get_user_auth_token AUTH_TOKEN

    PURPOSE=$1
    KEY_FILE=$2

    KMS_ID="waltid.tenant1.kms1"

    response=$(curl -X 'POST' \
        "http://waltid.enterprise.localhost:3000/v1/$KMS_ID/kms-service-api/keys/generate" \
        -H 'accept: application/json' \
        -H "Authorization: Bearer $AUTH_TOKEN" \
        -H 'Content-Type: application/json' \
        -d '{
            "backend": "jwk",
            "keyType": "Ed25519"
        }' 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "$PURPOSE key could not be generate from $KMS_ID."
        error "$response"
    else
        info "$PURPOSE key successfully generated."
        echo "$response" | jq
        echo "$response"

        DID_KEY=$(echo $response | jq "._id" | cut -d\" -f2)
        echo $DID_KEY > $KEY_FILE

        info "Key saved in the $KEY_FILE file"
    fi
}

generate_did_key() {
    generate_key "DID" ".did_key"
}

generate_status_key() {
    generate_key "Credential Status" ".status_key"
}

create_did_service() {
   create_service "did" "did1"
}

create_did() {

    get_user_auth_token AUTH_TOKEN

    DID_SERVICE_ID="waltid.tenant1.did1"
    
    if [[ ! -f .did_key ]]; then
        info "DID key doesn't exist. Let's create one..."
        generate_did_key
    fi

    KEY_ID=$(cat .did_key)

    response=$(curl -X 'POST' \
        "http://waltid.enterprise.localhost:3000/v1/$DID_SERVICE_ID/did-service-api/dids/create/key" \
        -H 'accept: application/json' \
        -H "Authorization: Bearer $AUTH_TOKEN" \
        -H 'Content-Type: application/json' \
        -d "{
            \"keyId\": \"$KEY_ID\",
            \"useJwkJcsPub\": true
        }" 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "did:key could not be created."
        error "$response"
    else
        echo $response > .did
        info "did:key successfully created and saved in the .did file:"
        echo "$response" | jq ".did"
    fi

}

create_issuer_service() {

    ISSUER_SERVICE_ID="waltid.tenant1.issuer1"
    KMS_SERVICE_ID="waltid.tenant1.kms1"
    KEY_ID="test.tenant1.kms1.2CP9-WVc83iO4gAtOYrJhc-gy1nl73fWXOChG1hnI44"

    get_user_auth_token AUTH_TOKEN


    response=$(curl -X 'POST' \
        "http://waltid.enterprise.localhost:3000/v1/$ISSUER_SERVICE_ID/resource-api/services/create" \
        -H 'accept: */*' \
        -H "Authorization: Bearer $AUTH_TOKEN" \
        -H 'Content-Type: application/json' \
        -d "{
            \"type\": \"issuer\",
            \"kms\": \"$KMS_SERVICE_ID\",
            \"tokenKeyId\": \"$KEY_ID\",
            \"supportedCredentialTypes\": {
                \"identity_credential_vc+sd-jwt\": {
                \"format\": \"vc+sd-jwt\",
                \"vct\": \"{vctBaseURL}/identity_credential\",
                \"cryptographic_binding_methods_supported\": [
                    \"jwk\"
                ],
                \"credential_signing_alg_values_supported\": [
                    \"ES256\"
                ],
                \"sdJwtVcTypeMetadata\": {
                    \"name\": \"Identity Credential\",
                    \"description\": \"The Identity Verifiable Credential\",
                    \"vct\": \"{vctBaseURL}/identity_credential\"
                }
                },
                \"OpenBadgeCredential_jwt_vc_json\": {
                \"format\": \"jwt_vc_json\",
                \"cryptographic_binding_methods_supported\": [
                    \"did\"
                ],
                \"credential_signing_alg_values_supported\": [
                    \"ES256\"
                ],
                \"credential_definition\": {
                    \"type\": [
                    \"VerifiableCredential\",
                    \"OpenBadgeCredential\"
                    ]
                }
                }
            }
        }" 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "Issuer Service $ISSUER_SERVICE_ID could not be created."
        error "$response"
    else
        info "Issuer Service $ISSUER_SERVICE_ID successfully created."
    fi
}

create-verifier-service() {
    
    get_user_auth_token AUTH_TOKEN

    response=$( 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "XXX could not be added."
        error "$response"
    else
        info "XXX successfully added."
    fi
}

list_organizations() {

    # TODO Print only relevant infos

    get_superadmin_auth_token AUTH_TOKEN

    response=$(curl -X 'GET' \
        'http://localhost:3000/v1/admin/organizations?maxPageSize=100&page=0' \
        -H 'accept: application/json' \
        -H "Authorization: Bearer $AUTH_TOKEN" 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "Organizations could not be listed."
        error "$response"
    else
        info "Organizations list:"
        echo "$response" | jq
    fi
}

list_accounts() {

    # TODO Print only relevant infos

    get_superadmin_auth_token AUTH_TOKEN

    response=$(curl -X 'GET' \
        'http://localhost:3000/v1/admin/accounts?maxPageSize=100&page=0' \
        -H 'accept: application/json' \
        -H "Authorization: Bearer $AUTH_TOKEN" 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "Accounts could not be listed."
        error "$response"
    else
        info "Account list:"
        echo "$response" | jq
    fi

}

list_resources() {

    get_user_auth_token AUTH_TOKEN

    TENANT_ID="waltid.tenant1"

    response=$(curl -X 'GET' \
        "http://waltid.enterprise.localhost:3000/v1/$TENANT_ID/resource-api/resources/list" \
        -H 'accept: application/json' \
        -H "Authorization: Bearer $AUTH_TOKEN" 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "Resources could not be listed."
        error "$response"
    else
        info "Resource list:"
        echo "$response" | jq
    fi

    

}

list_keys() {
    
    get_user_auth_token AUTH_TOKEN

    KMS_ID="waltid.tenant1.kms1"

    response=$(curl -X 'GET' \
        "http://waltid.enterprise.localhost:3000/v1/$KMS_ID/kms-service-api/keys/list" \
        -H 'accept: application/json' \
        -H "Authorization: Bearer $AUTH_TOKEN" 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "$KMS_ID keys could not be listed."
        error "$response"
    else
        info "$KMS_ID keys:"
        echo "$response" | jq
    fi
}

aa() {
    
    get_user_auth_token AUTH_TOKEN

    response=$( 2> /dev/null)

    if [[ $response == *"exception"* ]]; then
        error "XXX could not be added."
        error "$response"
    else
        info "XXX successfully added."
    fi
}

help() {
    cli_name=${0##*/}
    echo "Walt.id Enterprise Stack Quickstarter v$(cat $WORKDIR/VERSION)

Usage: $cli_name [command]

Commands:
  run                               Run the Enterprise Stack
  superadmin-create-account         Create the super admin account
  init-db                           Initialize the database
  superadmin-login                  Log in the super admin
  create-organization               Create (an | the root) Organization
  create-user-account               Create a new user
  add-admin-role                    Assign the 'admin' role to the user previously created
  user-admin-login                  Log in user with admin role
  create-tenant                     Create tenant in the organization created with the superadmin user
  create-kms-service                Create KMS service in the tenant
  generate-did-key                  Generate a key to be later used on DID creation
  generate-status-key
  create-did-service                Create DID service in the tenant
  create-did
  create-credential-status-service  Create credential status service
  create-issuer-service             Create issuer service in the tenant
  create-verifier-service           Create verifier service in the tenant
  list-organizations
  list-accounts
  list-resources
  recreate-db                       Delete all data and restart it from scratch
   "
  exit 1
}


case "$1" in
    run|step1)
        run
        ;;
    superadmin-create-account|step2)
        superadmin_create_account
        ;;
    superadmin-login|step3)
        superadmin_login
        ;;
    init-db|step4)
        init_db
        ;;
    create-organization|step5)
        create_organization
        ;;
    create-user-account|step6)
        create_user_account
        ;;
    add-admin-role|step7)
        add_admin_role_to_user
        ;;
    user-admin-login)
        user_admin_login
        ;;
    create-tenant)
        create_tenant
        ;;
    create-kms-service)
        create_kms_service
        ;;
    generate-did-key)
        generate_did_key
        ;;
    generate-status-key)
        generate_status_key
        ;;
    create-did-service)
        create_did_service
        ;;
    create-did)
        create_did
        ;;
    create-credential-status-service)
        create_credential_status_service
        ;;
    create-issuer-service)
        create_issuer_service
        ;;
    create-verifier-service)
        create_verifier_service
        ;;
    list-organizations)
        list_organizations
        ;;
    list-accounts)
        list_accounts
        ;;
    list-resources)
        list_resources
        ;;
    list-keys)
        list_keys
        ;;
    recreate-db|step99)
        recreate_collections
        ;;
    *)
        help
        ;;
esac


